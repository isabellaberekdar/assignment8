{"version":3,"sources":["components/TableCell.jsx","components/TableRow.jsx","components/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["TableCell","props","colorAll","style","backgroundColor","onClick","changeColor","TableRow","cells","i","cols","push","color","map","cell","Table","rows","row","App","addCol","setState","state","addRow","removeCol","removeRow","changeCellColor","e","event","target","value","clear","className","name","onChange","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAceA,MAZf,SAAmBC,GACf,OAAIA,EAAMC,SAEC,wBAAIC,MAAO,CAACC,gBAAiB,QAASC,QAASJ,EAAMK,cAGxD,wBAAID,QAASJ,EAAMK,eCchBC,MAlBf,SAAkBN,GAEd,IADA,IAAIO,EAAQ,GACJC,EAAE,EAAGA,EAAIR,EAAMS,KAAMD,IACzBD,EAAMG,KACF,kBAAC,EAAD,CACIC,MAAOX,EAAMW,MACbV,SAAUD,EAAMC,SAChBI,YAAaL,EAAMK,eAI/B,OACI,4BACKE,EAAMK,KAAI,SAAAC,GAAI,OAAIA,OCOhBC,MArBf,SAAed,GAEX,IADA,IAAIe,EAAO,GACHP,EAAE,EAAGA,EAAIR,EAAMe,KAAMP,IACzBO,EAAKL,KACD,kBAAC,EAAD,CACIC,MAAOX,EAAMW,MACbV,SAAUD,EAAMC,SAChBQ,KAAMT,EAAMS,KACZJ,YAAaL,EAAMK,eAI/B,OACI,6BACI,+BACKU,EAAKH,KAAI,SAAAI,GAAG,OAAIA,QC6DlBC,G,kBA1EX,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KASRkB,OAAS,WACP,EAAKC,SAAS,CAACV,KAAM,EAAKW,MAAMX,KAAO,KAXtB,EAcnBY,OAAS,WACP,EAAKF,SAAS,CAACJ,KAAM,EAAKK,MAAML,KAAO,KAftB,EAkBnBO,UAAY,WACN,EAAKF,MAAMX,KAAO,GACpB,EAAKU,SAAS,CAACV,KAAM,EAAKW,MAAMX,KAAO,KApBxB,EAwBnBc,UAAY,WACN,EAAKH,MAAML,KAAO,GACpB,EAAKI,SAAS,CAACJ,KAAM,EAAKK,MAAML,KAAO,KA1BxB,EA8BnBS,gBAAkB,SAAAC,GAChB,IAAMC,EAAQD,EAAEE,OAChB,EAAKR,SAAS,CAAClB,UAAU,IAAQ,WAC/ByB,EAAMxB,MAAMC,gBAAkB,EAAKiB,MAAMT,UAjC1B,EAqCnBN,YAAc,SAAAoB,GACZ,EAAKN,SAAS,CAACR,MAAOc,EAAEE,OAAOC,SAtCd,EAyCnBC,MAAQ,SAAAJ,GACN,EAAKN,SAAS,CAAClB,UAAU,KAxCzB,EAAKmB,MAAQ,CACXL,KAAM,EACNN,KAAM,EACNE,MAAO,OACPV,UAAU,GANK,E,sEA8Cf,OACI,yBAAK6B,UAAU,OACb,4BAAQC,KAAK,QAAQC,SAAUC,KAAK5B,aAClC,4BAAQuB,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,QAAd,SAEF,4BAAQxB,QAAS6B,KAAKf,QAAtB,WACA,4BAAQd,QAAS6B,KAAKZ,QAAtB,WACA,4BAAQjB,QAAS6B,KAAKX,WAAtB,cACA,4BAAQlB,QAAS6B,KAAKV,WAAtB,cACA,kBAAC,EAAD,CACER,KAAMkB,KAAKb,MAAML,KACjBN,KAAMwB,KAAKb,MAAMX,KACjBJ,YAAa4B,KAAKT,gBAClBb,MAAOsB,KAAKb,MAAMT,MAClBV,SAAUgC,KAAKb,MAAMnB,WAEvB,4BAAQG,QAAS6B,KAAKJ,OAAtB,eACA,4BAAQzB,QAAS6B,KAAKJ,OAAtB,kB,GAnEIK,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f839e60b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction TableCell(props) {\r\n    if (props.colorAll) {\r\n        \r\n        return <td style={{backgroundColor: 'pink'}} onClick={props.changeColor}></td>\r\n    } else {\r\n        return (\r\n            <td onClick={props.changeColor}></td>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TableCell","import React from 'react';\r\nimport TableCell from './TableCell'\r\n\r\n\r\nfunction TableRow(props) {\r\n    let cells = []\r\n    for(let i=0; i < props.cols; i++) {\r\n        cells.push(\r\n            <TableCell \r\n                color={props.color}\r\n                colorAll={props.colorAll}\r\n                changeColor={props.changeColor} \r\n                 \r\n            />)\r\n    }\r\n    return (\r\n        <tr>\r\n            {cells.map(cell => cell)}\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TableRow","import React from 'react';\r\nimport TableRow from './TableRow'\r\n\r\nfunction Table(props) {\r\n    let rows = []\r\n    for(let i=0; i < props.rows; i++) {\r\n        rows.push(\r\n            <TableRow \r\n                color={props.color}\r\n                colorAll={props.colorAll}\r\n                cols={props.cols} \r\n                changeColor={props.changeColor}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <table>\r\n                {rows.map(row => row)}\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table","import React from 'react';\nimport Table from './components/Table'\nimport './App.css'\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        rows: 4,\n        cols: 5,\n        color: 'blue',\n        colorAll: false\n      }\n    }\n    \n    addCol = () => {\n      this.setState({cols: this.state.cols + 1})\n    }\n\n    addRow = () => {\n      this.setState({rows: this.state.rows + 1})\n    }\n\n    removeCol = () => {\n      if (this.state.cols > 0) {\n        this.setState({cols: this.state.cols - 1})\n      }\n    }\n\n    removeRow = () => {\n      if (this.state.rows > 0) {\n        this.setState({rows: this.state.rows - 1})\n      }\n    }\n\n    changeCellColor = e => {\n      const event = e.target\n      this.setState({colorAll: false}, () => {        \n        event.style.backgroundColor = this.state.color\n      })\n    }\n\n    changeColor = e => {\n      this.setState({color: e.target.value})\n    }\n\n    clear = e => {\n      this.setState({colorAll: true})\n    }\n\n    render() {\n        return (\n            <div className='App'>\n              <select name='color' onChange={this.changeColor}>\n                <option value='blue'>Blue</option>\n                <option value='cyan'>Cyan</option>\n                <option value='turquoise'>Turquoise</option>\n                <option value='pink'>Pink</option>\n              </select>\n              <button onClick={this.addCol}>Add col</button>\n              <button onClick={this.addRow}>Add Row</button>\n              <button onClick={this.removeCol}>Remove col</button>\n              <button onClick={this.removeRow}>Remove Row</button>\n              <Table \n                rows={this.state.rows} \n                cols={this.state.cols} \n                changeColor={this.changeCellColor}\n                color={this.state.color}\n                colorAll={this.state.colorAll}\n              />\n              <button onClick={this.clear}>Clear Cells</button>\n              <button onClick={this.clear}>Color All</button>\n\n            </div>\n        )\n    }\n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}